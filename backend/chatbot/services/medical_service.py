"""
Service de validation et d'enrichissement des r√©ponses m√©dicales.
"""
import re
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

class MedicalService:
    """Service de validation et d'enrichissement des r√©ponses m√©dicales."""
    
    # Mots-cl√©s pour la d√©tection d'urgence
    EMERGENCY_KEYWORDS = [
        'urgence', 'urgent', 'imm√©diat', 'imm√©diatement', 'appelez le 15', 
        'SAMU', 'composez le 15', 'service d\'urgence', 'allez aux urgences'
    ]
    
    # Avertissements standard
    DISCLAIMERS = {
        'general': (
            "‚ö†Ô∏è <strong>Information importante :</strong> Cette r√©ponse est g√©n√©r√©e par une IA et ne remplace pas "
            "l'avis d'un professionnel de sant√©. En cas d'urgence, composez le 15 ou le 112."
        ),
        'symptoms': (
            "üîç <strong>Conseil :</strong> Si vos sympt√¥mes persistent ou s'aggravent, "
            "veuillez consulter un professionnel de sant√©."
        ),
        'medication': (
            "üíä <strong>Important :</strong> Ne modifiez pas votre traitement sans l'avis d'un professionnel de sant√©."
        )
    }
    
    async def validate_response(self, query: str, response: str) -> Dict:
        """Valide une r√©ponse m√©dicale et ajoute des avertissements si n√©cessaire."""
        validation = {
            'requires_urgent_attention': self._check_emergency(response),
            'disclaimers': self._get_relevant_disclaimers(query, response),
            'sources': self._extract_sources(response)
        }
        return validation
    
    def _check_emergency(self, text: str) -> bool:
        """V√©rifie si le texte contient des indicateurs d'urgence."""
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.EMERGENCY_KEYWORDS)
    
    def _get_relevant_disclaimers(self, query: str, response: str) -> List[str]:
        """Retourne les avertissements pertinents en fonction de la requ√™te et de la r√©ponse."""
        disclaimers = [self.DISCLAIMERS['general']]
        
        # V√©rifier les sympt√¥mes dans la requ√™te
        symptom_keywords = ['mal', 'douleur', 'sympt√¥me', 'fi√®vre', 'naus√©e', 'fatigue']
        if any(keyword in query.lower() for keyword in symptom_keywords):
            disclaimers.append(self.DISCLAIMERS['symptoms'])
        
        # V√©rifier les m√©dicaments dans la r√©ponse
        if any(word in response.lower() for word in ['m√©dicament', 'prendre', 'dose', 'traitement']):
            disclaimers.append(self.DISCLAIMERS['medication'])
            
        return disclaimers
    
    def _extract_sources(self, text: str) -> List[Dict]:
        """Extrait les sources mentionn√©es dans le texte."""
        # Cette version simplifi√©e retourne des sources g√©n√©riques
        # Dans une version compl√®te, cela pourrait faire une recherche dans une base de donn√©es
        return [
            {
                'name': 'Minist√®re de la Sant√©',
                'url': 'https://solidarites-sante.gouv.fr/'
            },
            {
                'name': 'HAS - Haute Autorit√© de Sant√©',
                'url': 'https://www.has-sante.fr/'
            }
        ]

# Singleton instance
_medical_service = None

def get_medical_service():
    """Retourne une instance singleton du service m√©dical."""
    global _medical_service
    if _medical_service is None:
        _medical_service = MedicalService()
    return _medical_service
