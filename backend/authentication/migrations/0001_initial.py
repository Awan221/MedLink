# Generated by Django 5.2.1 on 2025-06-04 00:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codename', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'permission',
                'verbose_name_plural': 'permissions',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'role',
                'verbose_name_plural': 'roles',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='SpecialistType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('cardiologist', 'Cardiologue'), ('neurologist', 'Neurologue'), ('pediatrician', 'Pédiatre'), ('gynecologist', 'Gynécologue'), ('dermatologist', 'Dermatologue'), ('orthopedist', 'Orthopédiste'), ('ophthalmologist', 'Ophtalmologue'), ('other', 'Autre Spécialité')], max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'type de spécialiste',
                'verbose_name_plural': 'types de spécialistes',
            },
        ),
        migrations.CreateModel(
            name='UserRegistrationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('role', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('hopital', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=100)),
                ('numero_licence', models.CharField(max_length=20, unique=True)),
                ('date_licence', models.DateField()),
                ('documents', models.FileField(blank=True, null=True, upload_to='registration_documents/')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'registration request',
                'verbose_name_plural': 'registration requests',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='adresse email')),
                ('first_name', models.CharField(max_length=30, verbose_name='prénom')),
                ('last_name', models.CharField(max_length=30, verbose_name='nom')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('hopital', models.CharField(blank=True, max_length=255)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('numero_licence', models.CharField(blank=True, max_length=20)),
                ('date_licence', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='actif')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="date d'inscription")),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='dernière connexion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='authentication.role')),
                ('specialist_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specialists', to='authentication.specialisttype')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='user_documents/')),
                ('document_type', models.CharField(choices=[('REGISTRATION', "Document d'inscription"), ('LICENSE', 'Licence professionnelle'), ('IDENTITY', "Pièce d'identité")], max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='authentication.permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_permissions', to='authentication.role')),
            ],
            options={
                'verbose_name': 'permission de rôle',
                'verbose_name_plural': 'permissions de rôle',
                'unique_together': {('role', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='SubRolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_role', models.CharField(choices=[('GENERAL_PRACTITIONER', 'Médecin Généraliste'), ('CARDIOLOGIST', 'Cardiologue'), ('DIABETOLOGIST', 'Diabétologue'), ('NEUROLOGIST', 'Neurologue'), ('PEDIATRICIAN', 'Pédiatre'), ('RADIOLOGIST', 'Radiologue'), ('IMAGING_TECHNICIAN', 'Technicien en Imagerie'), ('LAB_TECHNICIAN', 'Technicien de Laboratoire')], max_length=30)),
                ('is_allowed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subrole_permissions', to='authentication.permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subrole_permissions', to='authentication.role')),
            ],
            options={
                'ordering': ['role', 'sub_role', 'permission'],
                'unique_together': {('role', 'sub_role', 'permission')},
            },
        ),
    ]
